{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","ContactData","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","Btntype","clicked","checkoutCanceled","checkoutContinued","contactData","state","orderForm","name","type","placeholder","validation","required","valid","surname","age","minLength","maxLength","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ing","price","toPr","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIndentifier","updatedOrderFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","formIsvalid","console","log","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCanceledHandler","history","goBack","checkoutContinuedHandler","replace","summary","Redirect","to","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","Route","path","match","url","component"],"mappings":"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","file":"static/js/2.a3f8b716.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.css';\n\nconst input=(props)=>{\n    let inputElement=null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch(props.elementType){\n        case ('input') :\n            inputElement=<input className={inputClasses.join(' ')}\n                                {...props.elementConfig}\n                                value={props.value}\n                                onChange={props.changed}/>;\n            break;\n        case ('textarea') :\n            inputElement=<textarea className={inputClasses.join(' ')}\n                                   {...props.elementConfig}\n                                   value={props.value}\n                                onChange={props.changed}/>;\n            break;\n        case ('select') :\n            inputElement=(<select className={inputClasses.join(' ')}\n                                    value={props.value}\n                                    onChange={props.changed}>\n\n                                 {props.elementConfig.options.map(option =>(\n                                     <option key={option.value} value={option.value}>\n                                         {option.displayValue}\n                                     </option>\n                                 ))}\n                        </select>\n            );\n            break;\n        default :\n            inputElement=<input className={inputClasses.join(' ')}\n                                {...props.elementConfig}\n                                value={props.value}\n                                onChange={props.changed}/>\n\n    }\n    return(\n        <div className={classes.Input} >\n            <label className={classes.Label}> {props.label} </label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input_s67N0\",\"Label\":\"Input_Label__n-1m\",\"InputElement\":\"Input_InputElement_2-aFx\",\"Invalid\":\"Input_Invalid_1sl1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary_1xBm4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData_1J81r\",\"Input\":\"ContactData_Input_19h-A\"};","import React from'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.css';\n\nconst checkoutSummary =(props) =>{\n    return(\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it taste good</h1>\n            <div style={{width:'100%', margin:'auto'}}>\n            <Burger  ingredients={props.ingredients}/>\n            </div>\n            <Button Btntype=\"Danger\" clicked={props.checkoutCanceled}> CANCEL</Button>\n            <Button Btntype=\"Success\" clicked={props.checkoutContinued}> OK</Button>\n\n        </div>\n\n    );\n};\nexport default checkoutSummary;","import React,{Component} from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport {updateObject, checkValidity} from '../../../shared/utility';\nimport axios from \"../../../axios-orders\";\nimport Input from '../../../components/UI/Input/Input';\nimport {connect} from 'react-redux';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\n\n\n\nclass contactData extends Component{\n    state={\n        orderForm: {\n\n                name : {\n                  elementType: 'input',\n                  elementConfig:{\n                      type: 'text',\n                      placeholder: 'Your name'\n                  },\n                  value: '',\n                  validation: {\n                      required:true\n                  },\n                    valid:false,\n                    touched: false\n                },\n                surname: {\n                    elementType: 'input',\n                    elementConfig:{\n                        type: 'text',\n                        placeholder: 'Your surname'\n                    },\n                    value: '',\n                    validation: {\n                        required:true\n                    },\n                    valid:false,\n                    touched: false\n                },\n                age: {\n                    elementType: 'input',\n                    elementConfig:{\n                        type: 'text',\n                        placeholder: 'Your age'\n                    },\n                    value: '',\n                    validation: {\n                        required:true,\n                        minLength: 0,\n                        maxLength: 2\n                    },\n                    valid:false,\n                    touched: false\n                },\n                email: {\n                    elementType: 'input',\n                    elementConfig:{\n                        type: 'email',\n                        placeholder: 'Your email'\n                    },\n                    value: '',\n                    validation: {\n                        required:true\n                    },\n                    valid:false,\n                    touched: false\n                },\n                deliveryMethod:{\n                    elementType: 'select',\n                    elementConfig:{\n                        options:[\n                            {value: 'fastest', displayValue: 'Fastest'},\n                            {value: 'cheapest', displayValue: 'Cheapest'}\n                            ]\n                    },\n                    value: 'fastest',\n                    validation: { },\n                    valid:false,\n                    touched: false\n                }\n\n\n        },\n        formIsValid:false\n    };\n    orderHandler=(event)=>{\n        event.preventDefault();\n        //alert('THA FAME MAGKES')\n        const formData ={};\n        for(let formElementIdentifier in this.state.orderForm){\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\n        }\n        const order = {\n            ingredients : this.props.ing,\n            price : this.props.toPr,\n            orderData: formData,\n            userId: this.props.userId\n        };\n        this.props.onOrderBurger(order, this.props.token);\n\n    };\n\n\n\n     inputChangedHandler=(event,inputIndentifier)=>{\n        //console.log(event.target.value)\n\n\n         const updatedOrderFormElement= updateObject(this.state.orderForm[inputIndentifier],{\n             value:event.target.value,\n             valid: checkValidity(event.target.value, this.state.orderForm[inputIndentifier].validation),\n             touched: true\n         });\n        const updatedOrderForm=updateObject(this.state.orderForm,{\n            [inputIndentifier]:updatedOrderFormElement});\n\n         //console.log(updatedOrderFormElement)\n         let formIsvalid =true ;\n        for(let inputIndentifier in updatedOrderForm){\n            formIsvalid= updatedOrderForm[inputIndentifier].valid && updatedOrderForm[inputIndentifier].validation\n        }\n        console.log(formIsvalid);\n         this.setState({\n             orderForm: updatedOrderForm,formIsValid:formIsvalid\n          })\n\n\n\n    };\n\n    render(){\n        const formElementsArray= [];\n        for(let key in this.state.orderForm){\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form=(\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement=>(\n                    <Input\n                        key={ formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event)=>this.inputChangedHandler(event,formElement.id)}/>\n                ))}\n            <Button Btntype=\"Success\" disabled={!this.state.formIsValid}>Order Now</Button>\n        </form>\n        );\n        if(this.props.loading){\n            form= <Spinner />;\n        }\n        return(\n         <div className={classes.ContactData}>\n            <h4>Complete your Order</h4>\n             {form}\n         </div>\n\n        );\n    }\n}\n\n\nconst mapStateToProps = state =>{\n    return {\n        ing: state.burgerBuilder.ingredients,\n        toPr: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\n\nconst mapDispatchToProps = dispatch=>{\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(contactData,axios));","import React,{Component} from 'react';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\nimport {Route,Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux'\n\nclass Checkout extends Component{\n\n    checkoutCanceledHandler=()=>{\n        this.props.history.goBack()\n    };\n    checkoutContinuedHandler=()=>{\n        this.props.history.replace('/checkout/contact-data')\n    };\n\n    render(){\n    let summary = <Redirect to=\"/\" />;\n    if(this.props.ing){\n        const purchasedRedirect = this.props.purchased ? <Redirect to='/'/> :null;\n       summary=( <div>\n           {purchasedRedirect}\n            <CheckoutSummary\n                checkoutContinued={this.checkoutContinuedHandler}\n                checkoutCanceled={this.checkoutCanceledHandler}\n                ingredients={this.props.ing}/>\n            <Route path={this.props.match.url + \"/contact-data\"} component={ContactData}   />\n\n        </div>);\n    }\n        return summary;\n\n    }\n\n}\n\nconst mapStateToProps=state=> {\n    return {\n        ing: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n};\n\nexport default  connect(mapStateToProps)(Checkout);"],"sourceRoot":""}