{"version":3,"sources":["components/UI/Input/Input.js","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minlength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","_var_www_burger_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchToAuthHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_7__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_12__","authRedirect","token","react_router_dom__WEBPACK_IMPORTED_MODULE_13__","to","errorMessage","error","message","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_8__","Btntype","clicked","Component","connect","auth","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.1c4531eb.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.css';\n\nconst input=(props)=>{\n    let inputElement=null;\n    const inputClasses = [classes.InputElement]\n\n    if (props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch(props.elementType){\n        case ('input') :\n            inputElement=<input className={inputClasses.join(' ')}\n                                {...props.elementConfig}\n                                value={props.value}\n                                onChange={props.changed}/>\n            break;\n        case ('textarea') :\n            inputElement=<textarea className={inputClasses.join(' ')}\n                                   {...props.elementConfig}\n                                   value={props.value}\n                                onChange={props.changed}/>\n            break;\n        case ('select') :\n            inputElement=(<select className={inputClasses.join(' ')}\n                                    value={props.value}\n                                    onChange={props.changed}>\n\n                                 {props.elementConfig.options.map(option =>(\n                                     <option key={option.value} value={option.value}>\n                                         {option.displayValue}\n                                     </option>\n                                 ))}\n                        </select>\n            );\n            break;\n        default :\n            inputElement=<input className={inputClasses.join(' ')}\n                                {...props.elementConfig}\n                                value={props.value}\n                                onChange={props.changed}/>\n\n    }\n    return(\n        <div className={classes.Input} >\n            <label className={classes.Label}> {props.label} </label>\n            {inputElement}\n        </div>\n    );\n}\n\nexport default input;","import React, {Component} from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\nimport {connect} from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport {Redirect} from 'react-router-dom';\nimport {updateObject, checkValidity} from '../../shared/utility';\n\n\nclass Auth extends Component {\n    state={\n        controls:{\n            email : {\n                elementType: 'input',\n                elementConfig:{\n                    type: 'email',\n                    placeholder: 'Your email'\n                },\n                value: '',\n                validation: {\n                    required:true,\n                    isEmail: true\n                },\n                valid:false,\n                touched: false\n            },\n            password : {\n                elementType: 'input',\n                elementConfig:{\n                    type: 'password',\n                    placeholder: 'Your password'\n                },\n                value: '',\n                validation: {\n                    required:true,\n                    minlength: 6\n                },\n                valid:false,\n                touched: false\n            }\n\n        },\n        isSignup: true\n    }\n\n    componentDidMount(){\n      if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\n          this.props.onSetAuthRedirectPath();\n      }\n    }\n\n\n\n    inputChangedHandler=(event,controlName)=>{\n        //console.log(event.target.value)\n        let updatedControls=updateObject(this.state.controls,{\n            [controlName]:updateObject(this.state.controls[controlName],{\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation ),\n                touched: true\n            })\n        });\n        this.setState({controls: updatedControls });\n    }\n    submitHandler=(event)=>{\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchToAuthHandler=()=>{\n        this.setState(prevState =>{\n            return {isSignup: !prevState.isSignup};\n        });\n    }\n\n\n    render() {\n        const formElementsArray= [];\n        for(let key in this.state.controls){\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n        let form=formElementsArray.map(formElement=>(\n                <Input\n                    key={ formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event)=>this.inputChangedHandler(event,formElement.id)}/>\n            )\n        );\n\n        if(this.props.loading){\n            form= <Spinner />;\n        }\n\n\n        let authRedirect = null;\n        if(this.props.token){\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>;\n        }\n\n        let errorMessage = null;\n        if(this.props.error){\n            errorMessage= (<p>{this.props.error.message}</p>);\n        }\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button Btntype=\"Success\">SUBMIT</Button>\n                </form>\n                <Button Btntype=\"Danger\" clicked={this.switchToAuthHandler}> SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP' } </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state =>{\n    return {\n        loading : state.auth.loading,\n        error: state.auth.error,\n        token: state.auth.token !==null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch=>{\n    return {\n        onAuth :(email, password, isSignup)=>dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: ()=>dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);"],"sourceRoot":""}